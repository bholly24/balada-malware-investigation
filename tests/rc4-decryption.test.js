const { rc4Decrypt, getStringArray} = require("../final/special-task-event");

describe("rc4 decrypt", () => {
    const encryptedStringArray = getStringArray();
    const rc4DecryptWithCorrectlyShiftedArray = (stringIndexPlus460, encryptionKey) =>
        rc4Decrypt(stringIndexPlus460, encryptionKey, getShiftedArray(encryptedStringArray, 41));

    const getShiftedArray = (array, shiftTimes) => {
        const a = getStringArray();
        for (let i = 0; i < shiftTimes; i++) {
            a.push(a.shift());
        }
        return () => a;
    }

    // Verify when the string array is in the correct order key is correct.
    // This was the original method I used to determine the number of shifts
    const getAllPossibleDecryptionCombinations = () => {
        return [...Array(encryptedStringArray.length).keys()]
            .map(i => ({index: i.toString(), value: rc4Decrypt(475, "5Y&!", getShiftedArray(encryptedStringArray, i))}));
    }

    test('Should not decrypt to "cooki" without cycling the array', () => {
        expect(rc4Decrypt(475, "5Y&!")).not.toBe("cooki");
        expect(rc4Decrypt(475, "5Y&!")).toBe("nÉì");
    })

    test('Should determine the number of shifts from all possible outcomes', () => {
        const correctDecryptedValue = getAllPossibleDecryptionCombinations()
            .filter(a => a.value === 'cooki');
        expect(correctDecryptedValue.length).toBe(1);
        expect(correctDecryptedValue[0].index).toBe('41');
    });

    test('Should verify that the starting value is 41 by copying the logic from the iifeToDetermineTheArrayOrderForDecryption while loop', () => {
        const verificationNumberFromScript = parseInt(rc4DecryptWithCorrectlyShiftedArray(591, "6gP8")) + parseInt(rc4DecryptWithCorrectlyShiftedArray(511, "2byP")) / 2 + -parseInt(rc4DecryptWithCorrectlyShiftedArray(472, "3Q1L")) / 3 + parseInt(rc4DecryptWithCorrectlyShiftedArray(462, "(sKr")) / 4 * (parseInt(rc4DecryptWithCorrectlyShiftedArray(566, "&%5%")) / 5) + -parseInt(rc4DecryptWithCorrectlyShiftedArray(489, "20sJ")) / 6 + parseInt(rc4DecryptWithCorrectlyShiftedArray(538, "k4v^")) / 7 * (-parseInt(rc4DecryptWithCorrectlyShiftedArray(569, "f]Cu")) / 8) + -parseInt(rc4DecryptWithCorrectlyShiftedArray(485, "TZ@0")) / 9 * (-parseInt(rc4DecryptWithCorrectlyShiftedArray(536, "9Uf5")) / 10);
        expect(verificationNumberFromScript).toBe(863819)
    });

    test('Should decrypt known strings to after determining the correct number of times to shift the encrypted string array', () => {
        expect(rc4DecryptWithCorrectlyShiftedArray(475, "5Y&!", getShiftedArray(encryptedStringArray, 41))).toBe("cooki")
        expect(rc4DecryptWithCorrectlyShiftedArray(556, "TZ@0", getShiftedArray(encryptedStringArray, 41))).toBe("index")
    });
});
